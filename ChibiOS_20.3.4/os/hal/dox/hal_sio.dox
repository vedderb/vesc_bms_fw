/*
    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
 * @defgroup SIO SIO Driver
 * @brief   Generic SIO Driver.
 * @details This driver abstracts a generic serial communication channel,
 *          usually an UART, this driver is similar to Serial and UART drivers
 *          but follows a different concept:
 *          - Very close to HW.
 *          - No buffering done in SW, the driver relies on the peripheral
 *            internal FIFO, if any.
 *          - Asynchronous, the API is always non blocking.
 *          - Callbacks capable, operations completion and other events are
 *            notified using callbacks.
 *          - Very short code paths, especially in ISRs.
 *          .
 * @pre     In order to use the SIO driver the @p HAL_USE_SIO option
 *          must be enabled in @p halconf.h.
 *
 * @section sio_1 Driver State Machine
 * The driver implements a state machine internally, not all the driver
 * functionalities can be used in any moment, any transition not explicitly
 * shown in the following diagram has to be considered an error and shall
 * be captured by an assertion (if enabled).
 * @dot
  digraph example {
    rankdir="LR";
    node [shape=circle, fontname=Helvetica, fontsize=8, fixedsize="true", width="0.9", height="0.9"];
    edge [fontname=Helvetica, fontsize=8];

    uninit [label="SIO_UNINIT", style="bold"];
    stop  [label="SIO_STOP\nLow Power"];
    ready [label="SIO_READY\nClock Enabled"];

    uninit -> stop [label="\nsioInit()"];
    stop -> ready [label="\nsioStart()"];
    ready -> ready [label="\nsioStart()"];
    ready -> stop [label="\nsioStop()"];
    stop -> stop [label="\nsioStop()"];
  }
 * @enddot
 *
 * @ingroup HAL_NORMAL_DRIVERS
 */
